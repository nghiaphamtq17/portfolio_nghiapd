name: Deploy to VPS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
    
    - name: Run type checking
      run: npm run type-check
    
    - name: Build application
      run: npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: .next/
        retention-days: 1

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
    
    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT }}
        timeout: 60s
        command_timeout: 10m
        script: |
          echo "🚀 Starting deployment..."
          echo "Current directory: $(pwd)"
          echo "User: $(whoami)"
          echo "Date: $(date)"
          
          # Update system packages
          echo "📦 Updating system packages..."
          sudo apt-get update
          
          # Install Docker if not exists
          if ! command -v docker &> /dev/null; then
            echo "📦 Installing Docker..."
            # Install required packages
            sudo apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release
            
            # Add Docker's official GPG key
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
            
            # Add Docker repository
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            
            # Update package index
            sudo apt-get update
            
            # Install Docker
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
            
            # Start Docker service
            sudo systemctl start docker
            sudo systemctl enable docker
            
            # Add user to docker group
            sudo usermod -aG docker $USER
            
            echo "✅ Docker installed successfully!"
          else
            echo "✅ Docker already installed"
          fi
          
          # Install Docker Compose if not exists
          if ! command -v docker-compose &> /dev/null; then
            echo "📦 Installing Docker Compose..."
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            echo "✅ Docker Compose installed successfully!"
          else
            echo "✅ Docker Compose already installed"
          fi
          
          # Create directory if not exists
          if [ ! -d "/var/www" ]; then
            echo "📁 Creating /var/www directory..."
            sudo mkdir -p /var/www
            sudo chown $USER:$USER /var/www
          fi
          
          # Clone repository if not exists
          if [ ! -d "/var/www/portfolio_nghiapd" ]; then
            echo "📥 Cloning repository..."
            cd /var/www
            
            # Try HTTPS first, if fails try SSH
            if git clone https://github.com/YOUR_USERNAME/portfolio_nghiapd.git; then
              echo "✅ Repository cloned successfully via HTTPS!"
            else
              echo "❌ HTTPS clone failed, trying SSH..."
              # Setup SSH for git clone
              eval "$(ssh-agent -s)"
              echo "${{ secrets.VPS_SSH_KEY }}" | ssh-add -
              mkdir -p ~/.ssh
              ssh-keyscan github.com >> ~/.ssh/known_hosts
              git clone git@github.com:YOUR_USERNAME/portfolio_nghiapd.git
              echo "✅ Repository cloned successfully via SSH!"
            fi
          else
            echo "✅ Repository already exists"
          fi
          
          # Check if repository exists
          if [ ! -d "/var/www/portfolio_nghiapd" ]; then
            echo "❌ Repository clone failed!"
            exit 1
          fi
          
          cd /var/www/portfolio_nghiapd
          
          # Check if docker service is running
          echo "🔍 Checking Docker service..."
          if ! sudo systemctl is-active --quiet docker; then
            echo "🚀 Starting Docker service..."
            sudo systemctl start docker
          fi
          
          # Pull latest changes
          echo "📥 Pulling latest changes..."
          git pull origin main || echo "⚠️ Git pull failed, continuing with existing code..."
          
          # Stop existing containers
          echo "🐳 Stopping existing containers..."
          docker-compose down || true
          
          # Build and start new containers
          echo "🔨 Building and starting new containers..."
          if docker-compose up -d --build; then
            echo "✅ Containers started successfully!"
          else
            echo "❌ Container startup failed!"
            echo "Checking Docker logs..."
            docker-compose logs
            exit 1
          fi
          
          # Clean up old images
          echo "🧹 Cleaning up old images..."
          docker system prune -f || true
          
          echo "✅ Deployment completed!"
          echo "Checking container status..."
          docker-compose ps
